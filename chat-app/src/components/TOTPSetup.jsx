// // src/components/TOTPSetup.jsx
// import { useState, useEffect } from 'react';
// import { useAuth } from '../contexts/AuthContext';
// import { initiateTOTPSetup, verifyTOTPSetup } from '../services/rocketchat';
// import { QrCode } from 'lucide-react';

// const TOTPSetup = ({ onSetupComplete }) => {
//   const { authToken, userId } = useAuth();
//   const [totpData, setTotpData] = useState(null);
//   const [totpCode, setTotpCode] = useState('');
//   const [error, setError] = useState('');
//   const [isLoading, setIsLoading] = useState(false);

//   useEffect(() => {
//     const fetchTOTPSetup = async () => {
//       setIsLoading(true);
//       const result = await initiateTOTPSetup(authToken, userId);
//       if (result.success) {
//         setTotpData(result.data); // Expected to contain qr and secret
//       } else {
//         setError(result.error || 'Failed to initiate TOTP setup');
//       }
//       setIsLoading(false);
//     };
//     fetchTOTPSetup();
//   }, [authToken, userId]);

//   const handleVerifyTOTP = async (e) => {
//     e.preventDefault();
//     setError('');
//     setIsLoading(true);

//     if (!totpCode.trim()) {
//       setError('Please enter the TOTP code');
//       setIsLoading(false);
//       return;
//     }

//     const result = await verifyTOTPSetup(authToken, userId, totpCode);
//     if (result.success) {
//       onSetupComplete(); // Notify parent component that setup is complete
//     } else {
//       setError(result.error || 'Invalid TOTP code. Please try again.');
//     }
//     setIsLoading(false);
//   };

//   if (isLoading) {
//     return <div className="flex items-center justify-center text-gray-400">Loading TOTP setup...</div>;
//   }

//   if (!totpData) {
//     return <div className="text-red-400">Error initiating TOTP setup. Please try again.</div>;
//   }

//   return (
//     <div className="min-h-screen bg-[#1f2329] flex items-center justify-center">
//       <div className="bg-[#2f343d] p-8 rounded-lg shadow-lg w-full max-w-md">
//         <h2 className="text-2xl font-bold text-white mb-6 text-center">Set Up Two-Factor Authentication</h2>
//         <p className="text-gray-300 mb-4">Scan the QR code below with your authenticator app (e.g., Google Authenticator) to enable 2FA.</p>
//         {totpData.qr && <QrCode value={totpData.qr} size={200} className="mx-auto mb-4" />}
//         <p className="text-gray-300 mb-4">Alternatively, use this secret key manually: <strong>{totpData.secret}</strong></p>
//         <p className="text-gray-300 mb-4">Enter the code generated by your authenticator app to verify.</p>
//         <form onSubmit={handleVerifyTOTP} className="space-y-6">
//           <div>
//             <label className="block text-sm text-gray-300 mb-1">TOTP Code</label>
//             <input
//               type="text"
//               value={totpCode}
//               onChange={(e) => setTotpCode(e.target.value)}
//               className="w-full px-4 py-2 bg-[#1f2329] border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500"
//               placeholder="Enter 6-digit code"
//               disabled={isLoading}
//             />
//           </div>
//           {error && <p className="text-red-400 text-sm">{error}</p>}
//           <button
//             type="submit"
//             disabled={isLoading || !totpCode.trim()}
//             className="w-full py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg transition-colors disabled:bg-gray-700 disabled:cursor-not-allowed"
//           >
//             {isLoading ? 'Verifying...' : 'Verify and Enable 2FA'}
//           </button>
//         </form>
//       </div>
//     </div>
//   );
// };

// export default TOTPSetup;